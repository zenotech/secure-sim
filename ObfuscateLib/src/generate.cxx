
#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <typeinfo>


#include <dlfcn.h>
#include <sys/types.h>

#include "HashGen.h"

using namespace std;

string toHex(unsigned char c){
	ostringstream ret;
	ret << showbase // show the 0x prefix
        << internal // fill between the prefix and the number 
        << std::hex << std::setfill('0') << std::setw(4) << (int)c;

    return ret.str();
}

typedef int (*ptrace_ptr_t)(int _request, pid_t _pid, caddr_t _addr, int _data);
#if !defined(PT_DENY_ATTACH)
#define PT_DENY_ATTACH 31
#endif  // !defined(PT_DENY_ATTACH)

void disable_gdb() {
    void* handle = dlopen(0, RTLD_GLOBAL | RTLD_NOW);
    ptrace_ptr_t ptrace_ptr = (ptrace_ptr_t)dlsym(handle, "ptrace");
    ptrace_ptr(PT_DENY_ATTACH, 0, 0, 0);
    dlclose(handle);
}


int main(int argc, char *argv[]){

    #if !(DEBUG) // Don't interfere with Xcode debugging sessions.
        disable_gdb();
    #endif

	if(argc != 2){
		cout << "Usage: generate twenty_character_key"  << endl;
		exit(EXIT_FAILURE);
	}

	// Read key
	string key = argv[1];

	if(key.size() < 20){
		cout << "Error: key less than 20 characters" << endl;
		exit(EXIT_FAILURE);
	}

	cout << "Key: " << key << endl;

	// Hash the string to generate obfuscator
  	unsigned char hash[SHA_DIGEST_LENGTH]; // == 20

  	generateObfuscator(hash);


	// Xor key to generate obfuscated Key
	unsigned char obfuscatedSecretKey[SHA_DIGEST_LENGTH];

	for(int i = 0; i < SHA_DIGEST_LENGTH; ++i){
		obfuscatedSecretKey[i] = key[i] ^ hash[i];
	}

	// Check to see if we recover original key
	unsigned char originalKey[SHA_DIGEST_LENGTH]; 
	for(int i = 0; i < SHA_DIGEST_LENGTH; ++i){
		originalKey[i] = obfuscatedSecretKey[i] ^ hash[i];
	}
	for(int i = 0; i < SHA_DIGEST_LENGTH; ++i){
		if(originalKey[i] != key[i]){
			cout << "Found key mismatch" << endl;
			exit(EXIT_FAILURE);
		}
	}

	{
		// Generate header file
		ofstream out("key.h");
		out << "// Autogenerated file do not modify\n" << endl;
		out << "unsigned char key [] = { " << endl;
		for(int i = 0; i < SHA_DIGEST_LENGTH; ++i){
			out << toHex(obfuscatedSecretKey[i]) << "," << endl;
		}
		out << "};" << endl;
	}

	// Generate py file
	{
		ofstream out("key.py");
		out << "# Autogenerated file do not modify\n" << endl;
		out << "key = ( " << endl;
		for(int i = 0; i < SHA_DIGEST_LENGTH; ++i){
			out << toHex(obfuscatedSecretKey[i]) << "," << endl;
		}
		out << ")" << endl;
	}

}
